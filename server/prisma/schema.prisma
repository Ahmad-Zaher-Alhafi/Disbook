// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  username         String        @unique
  password         String
  fullName         String
  email            String        @unique
  imgUrl           String?
  interactions     Interaction[]
  messagesSent     Message[]     @relation("SentMessages")
  messagesRecieved Message[]     @relation("RecievedMessages")
  posts            Post[]        @relation("CreatedPosts")
  comments         Comment[]     @relation("Comments")
  likes            Like[]        @relation("Likes")
}

model Interaction {
  id    Int    @id @default(autoincrement())
  users User[]
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  senderID   Int
  recieverID Int
  sender     User     @relation("SentMessages", fields: [senderID], references: [id])
  reciever   User     @relation("RecievedMessages", fields: [recieverID], references: [id])
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  userId    Int
  user      User      @relation("CreatedPosts", fields: [userId], references: [id])
  comments  Comment[] @relation("Comments")
  likes     Like[]    @relation("Likes")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation("Comments", fields: [userId], references: [id])
  postId    Int
  post      Post     @relation("Comments", fields: [postId], references: [id])
  likes     Like[]   @relation("Likes")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation("Likes", fields: [userId], references: [id])
  postId    Int?
  post      Post?    @relation("Likes", fields: [postId], references: [id])
  commentId Int?
  comment   Comment? @relation("Likes", fields: [commentId], references: [id], onDelete: Cascade)
}
